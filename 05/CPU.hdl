// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Definiciones de variables 
    Or( a = instruction[0], b = false, out = j1);
    Or( a = instruction[1], b = false, out = j2);
    Or( a = instruction[2], b = false, out = j3);
    
    Or( a = instruction[3], b = false, out = destinationM);
    Or( a = instruction[4], b = false, out = destinationD);
    Or( a = instruction[5], b = false, out = destinationA);
    
    Or( a = instruction[6],  b = false, out = c6);
    Or( a = instruction[7],  b = false, out = c5);
    Or( a = instruction[8],  b = false, out = c4);
    Or( a = instruction[9],  b = false, out = c3);
    Or( a = instruction[10], b = false, out = c2);
    Or( a = instruction[11], b = false, out = c1);
    Or( a = instruction[12], b = false, out = a);

    Or( a  = instruction[15], b = false, out = instructionC);
    Not(in = instructionC, out = instructionA);


    //Mux entre ALU output e instruccion
    And(a = instructionC, b = destinationA, out = loadPreviousOut);
    Mux16(a = instruction, b = previousOut, sel = loadPreviousOut,
    out = inputForA);

    //Registro A
    Or(a = instructionA, b = destinationA, out = writeInA);
    ARegister(in = inputForA, load = writeInA, out = A, out[0..14] = addressM);

    //Registro D
    And(a = instructionC, b = destinationD, out = writeInD);
    DRegister(in = previousOut, load = writeInD, out = D);

    //Mux entre A o M
    Mux16(a = A, b = inM, sel = a, out = inputForALU);

    //WriteM
    And(a = instructionC, b = destinationM, out = writeM);
   
    //ALU
    ALU(x   = D, y = inputForALU,
        zx  = c1,
        nx  = c2,
        zy  = c3,
        ny  = c4,
        f   = c5,
        no  = c6,
        zr  = zr,
        ng  = ng,
        out = previousOut,
        out = outM);

    //Program Counter
    And(a = instructionC, b = j1, out = greaterThanZero);
    And(a = instructionC, b = j2, out = equalsZero);
    And(a = instructionC, b = j3, out = lessThanZero);
    
    DMux8Way(in = true, sel[2] = lessThanZero, sel[1] = equalsZero,
             sel[0] = greaterThanZero,
             a = null,
             b = jgt,
             c = jeq,
             d = jge,
             e = jlt,
             f = jne,
             g = jle,
             h = jmp);
   
    Not(in = zr, out = notZr);
    Not(in = ng, out = notNg);
    Or(  a = zr, b = notNg, out = zrOrNotNg);
    Or(  a = zr, b = ng,    out = zrOrNg);
    Not(in = zrOrNg, out = zrNorNg);

    And(a = null, b = false,     out = q0);
    And(a = jgt,  b = zrNorNg,   out = q1);
    And(a = jeq,  b = zr,        out = q2);
    And(a = jge,  b = zrOrNotNg, out = q3);
    And(a = jlt,  b = ng,        out = q4);
    And(a = jne,  b = notZr,     out = q5);
    And(a = jle,  b = zrOrNg,    out = q6);
    And(a = jmp,  b = true,      out = q7);
    
    Or8Way(in[0] = q0, in[1] = q1, in[2] = q2, in[3] = q3, in[4] = q4,
           in[5] = q5, in[6] = q6, in[7] = q7,
           out = PCLoad);

    PC(in = A, load = PCLoad, inc = true, reset = reset,
    out[0..14] = pc);



}
